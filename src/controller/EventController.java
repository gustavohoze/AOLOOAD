package controller;

import model.Event;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class EventController {
    private Connection connection; // Database connection

    public EventController(Connection connection) {
        this.connection = connection;
    }

    // Method to create a new event
    public Event createEvent(String eventName, String date, String location, String description, String organizerId) {
        String eventId = null; // Event ID will be generated by the database (auto-increment or UUID)
        String sql = "INSERT INTO events (event_name, event_date, event_location, event_description, organizer_id) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, eventName);
            stmt.setString(2, date);
            stmt.setString(3, location);
            stmt.setString(4, description);
            stmt.setString(5, organizerId);
            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        eventId = generatedKeys.getString(1); // Retrieve the generated ID
                    }
                }
            } else {
                throw new SQLException("Creating event failed, no rows affected.");
            }
        } catch (SQLException e) {
            throw new IllegalArgumentException("Error creating event: " + e.getMessage());
        }

        return new Event(eventId, eventName, date, location, description, organizerId);
    }

    // Method to view event details by ID
    public Event viewEventDetails(String eventId) {
        String sql = "SELECT * FROM events WHERE event_id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, eventId);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new Event(
                            rs.getString("event_id"),
                            rs.getString("event_name"),
                            rs.getString("event_date"),
                            rs.getString("event_location"),
                            rs.getString("event_description"),
                            rs.getString("organizer_id")
                    );
                } else {
                    throw new IllegalArgumentException("Event with ID " + eventId + " not found.");
                }
            }
        } catch (SQLException e) {
            throw new IllegalArgumentException("Error retrieving event details: " + e.getMessage());
        }
    }
}